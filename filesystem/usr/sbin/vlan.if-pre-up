#!/usr/bin/env sh
# This file is part of libertine linux's package libertine_filesystem. It is subject to the license terms in the COPYRIGHT file found in the top-level directory of this distribution and at https://raw.githubusercontent.com/libertine-linux-packages/libertine_filesystem/master/COPYRIGHT. No part of libertine linux's package libertine_filesystem, including this file, may be copied, modified, propagated, or distributed except according to the terms contained in the COPYRIGHT file.
# Copyright Â© 2016 The developers of libertine linux's package libertine_filesystem. See the COPYRIGHT file in the top-level directory of this distribution and at https://raw.githubusercontent.com/libertine-linux-packages/libertine_filesystem/master/COPYRIGHT.


set -e
set -u
set -f

libertine_network_vlan_enable()
{
	local vlanRawDevice="$1"
	local vlanId="$2"
	local vlanOrDevName="$3"
	local namePadding="$4"

	if ! command -v vconfig 1>/dev/null 2>/dev/null; then
		libertine_network_message "vconfig is missing from PATH, can not enable VLANs"
		return 0
	fi
	
	libertine_network_ensureModuleLoaded -d /proc/net/vlan 8021q
	
	local nameType="${vlanOrDevName}_PLUS_${namePadding}"
    vconfig set_name_type "$nameType"
    vconfig add "$vlanRawDevice" "$vlanId"
}


libertine_network_vlan_stripLeadingZerosOfVlanIdOrExitError()
{
	local unparsedVlanId="$1"
	
	local libertine_network_vlan_stripLeadingZerosOfVlanId_result
	case "$unparsedVlanId" in
		
		000*)
			libertine_network_vlan_stripLeadingZerosOfVlanId_result="${unparsedVlanId#000}"
		;;
		
		00*)
			libertine_network_vlan_stripLeadingZerosOfVlanId_result="${unparsedVlanId#00}"
		;;
		
		0*)
			libertine_network_vlan_stripLeadingZerosOfVlanId_result="${unparsedVlanId#0}"
		;;
		
		*)
			libertine_network_vlan_stripLeadingZerosOfVlanId_result="$unparsedVlanId"
		;;
		
	esac
	
	if [ -z "$libertine_network_vlan_stripLeadingZerosOfVlanId_result" ]; then
		exit 1
	fi
	
	# Should error in ash with code 2 if invalid
	libertine_network_vlan_stripLeadingZerosOfVlanId_result=$((libertine_network_vlan_stripLeadingZerosOfVlanId_result))
}

# Uses options:-
#   vlan-id
#	vlan-raw-device
libertine_network_if_pre_up_vlan_main()
{
	. /usr/lib/network.functions
	
	if core_variable_isUnsetOrEmpty IFACE; then
		return 0
	fi
	local weAreConfiguringInterface="$IFACE"

	case "$weAreConfiguringInterface" in

		*#*)
			return 0
		;;

		*:*)
			return 0
		;;
		
		vlan*.*)
			return 0
		;;
		
		vlan*)
			local unparsedVlanId="${weAreConfiguringInterface#vlan}"
			if core_variable_isSet IF_VLAN_ID; then
				unparsedVlanId="$IF_VLAN_ID"
			fi
			
			if core_variable_isUnsetOrEmpty IF_VLAN_RAW_DEVICE; then
				return 1
			fi
			local vlanRawDevice="$IF_VLAN_RAW_DEVICE"
			
			local vlanOrDevName='VLAN'
		;;
		
		*.*)
			local unparsedVlanId="${weAreConfiguringInterface##*.}"
			if core_variable_isSet IF_VLAN_ID; then
				unparsedVlanId="$IF_VLAN_ID"
			fi
			
			local vlanRawDevice="${weAreConfiguringInterface%.*}"
			if core_variable_isSet IF_VLAN_RAW_DEVICE; then
				vlanRawDevice="$IF_VLAN_RAW_DEVICE"
			fi
			
			local vlanOrDevName='DEV'
		;;
		
		*)
			if core_variable_isUnsetOrEmpty IF_VLAN_ID; then
				return 0
			fi
			local unparsedVlanId="$IF_VLAN_ID"
			
			if core_variable_isUnsetOrEmpty IF_VLAN_RAW_DEVICE; then
				return 0
			fi
			local vlanRawDevice="$IF_VLAN_RAW_DEVICE"
			
			# Guessed (RJC)
			local vlanOrDevName='DEV'
		;;
	esac
	
	case "$unparsedVlanId" in
		
		[1-9]*)
			local namePadding=VID_NO_PAD
		;;
		
		0???)
			local namePadding=VID
		;;
		
		0*)
			local namePadding=VID_NO_PAD
		;;
		
		*)
			libertine_network_message "Invalid VLAN id (tag) '$unparsedVlanId'"
			return 1
		;;
		
	esac
	
	local libertine_network_vlan_stripLeadingZerosOfVlanId_result
	libertine_network_vlan_stripLeadingZerosOfVlanIdOrExitError "$unparsedVlanId"
	local vlanId="$libertine_network_vlan_stripLeadingZerosOfVlanId_result"

	if ! ip link show dev "$vlanRawDevice" 1>/dev/null 2>/dev/null; then
		libertine_network_message "VLAN raw device '$vlanRawDevice' does not exist"
		return 1
	fi
	ip link set up dev "$vlanRawDevice"
	
	libertine_network_vlan_enable "$vlanRawDevice" "$vlanId" "$vlanOrDevName" "$namePadding"
	if ! ip link show dev "$IFACE" 1>/dev/null 2>/dev/null; then
		libertine_network_message "VLAN raw device '$vlanRawDevice' for VLAN id (tag) '$vlanId' was not created on interface '$weAreConfiguringInterface'"
		return 1
	fi
}

libertine_network_if_pre_up_vlan_main "$@"
