# This file is part of libertine linux's package libertine_filesystem. It is subject to the license terms in the COPYRIGHT file found in the top-level directory of this distribution and at https://raw.githubusercontent.com/libertine-linux-packages/libertine_filesystem/master/COPYRIGHT. No part of libertine linux's package libertine_filesystem, including this file, may be copied, modified, propagated, or distributed except according to the terms contained in the COPYRIGHT file.
# Copyright Â© 2016 The developers of libertine linux's package libertine_filesystem. See the COPYRIGHT file in the top-level directory of this distribution and at https://raw.githubusercontent.com/libertine-linux-packages/libertine_filesystem/master/COPYRIGHT.


libertine_network_setVerbosity()
{
	libertine_network_isVerbose=false
	if core_variable_isSet VERBOSITY; then
		if [ "$VERBOSITY" = '1' ]; then
			set -x
			libertine_network_isVerbose=true
		fi
	fi
}

libertine_network_message()
{
	local message="$1"
	
	if $libertine_network_isVerbose; then
		printf '%s\n' "$message" 1>&2
	fi
}

libertine_network_sysfs()
{
	local valueToWrite="$1"
	local weAreConfiguringInterface="$2"
	local fileName="$3"
	
	if [ -z "$valueToWrite" ]; then
		return 0
	fi
		
	set +e
	printf '%s\n' "$valueToWrite" >/sys/class/net/"$weAreConfiguringInterface"/master/bonding/"$fileName"
	local exitCode=$?
	set -e
	return $exitCode
}

libertine_network_sysfsAdd()
{
	local bondMaster="$1"
	local fileName="$2"
	local weAreConfiguringInterface="$3"
	shift 3
	
	local valueToWrite
	for valueToWrite in "$@"
	do
		# Write if not yet present
		if ! grep -s -q "\\<${valueToWrite}\\>" /sys/class/net/"$bondMaster"/bonding/"$fileName"; then
		    libertine_network_sysfs "+${valueToWrite}" "$weAreConfiguringInterface" "$fileName"
		fi
	done
}

libertine_network_ensureModuleLoaded()
{
	local fileTestKind="$1"
	local fileTestPath="$2"
	local moduleName="$3"

	if [ ! $fileTestKind "$fileTestPath" ]; then
		modprobe -q "$moduleName" || true
	fi
}

# Will set the variable libertine_network_mvlan_setRawDevice_result
# Will exit 0 if no mvlan raw device (eg this is not a mvlan interface)
libertine_network_mvlan_setRawDeviceOrExitOk()
{
	local weAreConfiguringInterface="$1"
	
	case "$weAreConfiguringInterface" in
		
		*#[0-9]*)
			if core_variable_isSet IF_MVLAN_RAW_DEVICE; then
				libertine_network_mvlan_setRawDevice_result="$IF_MVLAN_RAW_DEVICE"
			else
				local unusedMvlandId="${weAreConfiguringInterface##*#}"
				libertine_network_mvlan_setRawDevice_result="${weAreConfiguringInterface%#*}"
			fi
		;;
		
		*)
			if core_variable_isUnset IF_MVLAN_RAW_DEVICE; then
				exit 0
			fi
			libertine_network_mvlan_setRawDevice_result="$IF_MVLAN_RAW_DEVICE"
		;;
	
	esac
	
	if [ -n "$mvlanRawDevice" ]; then
		exit 0
	fi
}

if [ -s /usr/lib/core.functions ]; then
	. /usr/lib/core.functions
fi

libertine_network_setVerbosity
