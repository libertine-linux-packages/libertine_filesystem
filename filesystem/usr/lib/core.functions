# This file is part of libertine linux's package libertine_filesystem. It is subject to the license terms in the COPYRIGHT file found in the top-level directory of this distribution and at https://raw.githubusercontent.com/libertine-linux-packages/libertine_filesystem/master/COPYRIGHT. No part of libertine linux's package libertine_filesystem, including this file, may be copied, modified, propagated, or distributed except according to the terms contained in the COPYRIGHT file.
# Copyright Â© 2016 The developers of libertine linux's package libertine_filesystem. See the COPYRIGHT file in the top-level directory of this distribution and at https://raw.githubusercontent.com/libertine-linux-packages/libertine_filesystem/master/COPYRIGHT.


_libertine_rcS_hasBinaryInPath()
{
	local binary="$1"
	command -v "$binary" 1>/dev/null 2>/dev/null
}

_libertine_rcS_errorMessage()
{
	local message="$1"

	printf "ERROR: %s\n" "$message" 1>&2
}

_libertine_rcS_executeIfExistsAndIgnoreFailure()
{
	local commandToExecute="$1"
	shift 1
	
	if _libertine_rcS_hasBinaryInPath "$commandToExecute"; then
		set +e
		$commandToExecute "$@"
		local exitCode=$?
		set -e
		if [ $exitCode -ne 0 ]; then
			_libertine_rcS_errorMessage "The command '$commandToExecute $*' failed to execute (exit code was $exitCode)"
		fi
	else
		_libertine_rcS_errorMessage "The command '$commandToExecute' does not exist"
	fi
}

core_variable_isSet()
{
	# These expressions work in all shells bar pdksh 5.2.14, which treats expanded emptiness as unset...
	# Other techniques here: http://mywiki.wooledge.org/BashFAQ/083
	# eval "[ \"\${$1+set}\" = 'set' ]"
	# eval "$(printf '[ "${%s+set}" = '%s' ]' "$1" "set")"
	
	local x
	eval x="\"\${$1+set}\""
	[ "$x" = 'set' ]
}

core_variable_isUnset()
{
	# eval "[ \"\${$1+unset}\" != 'unset' ]"
	! core_variable_isSet "$1"
}

core_variable_indirectValue()
{
	eval "core_variable_indirectValue_result=\"\$${1}\""
}

core_variable_isUnsetOrEmpty()
{
	local variableName="$1"
	if core_variable_isUnset "$variableName"; then
		return 0
	fi
	
	local core_variable_indirectValue_result
	core_variable_indirectValue "$variableName"
	if [ -z "$core_variable_indirectValue_result" ]; then
		return 0
	fi
	return 1
}

core_compatibility_which()
{
	command -v "$1"
}

_core_compatibility_builtInDoesNotExist()
{
	local builtInName="$1"
	local value="$(PATH='' core_compatibility_which "$builtInName")"
	if [ "$builtInName" = "$value" ]; then
		return 1
	fi
	return 0
}

core_commandLine_exitCode_SOFTWARE=70
core_compability_installPushdAndPopd()
{
	# bash, zsh are known to support this
	if _core_compatibility_builtInDoesNotExist pushd; then
		
		if ! _core_compatibility_builtInDoesNotExist popd; then
			core_exitError $core_commandLine_exitCode_SOFTWARE "Weird shell does not have pushd but does have popd (?feature detection bug?)!"
		fi
		
		_core_init_compatibility_pushdCount=0

		pushd()
		{
			local path="$1"
			eval "core_init_pushdStack${_core_init_compatibility_pushdCount}='$(pwd)'"
			_core_init_compatibility_pushdCount=$((_core_init_compatibility_pushdCount+1))
			cd "$path" 1>/dev/null
		}

		popd()
		{
			_core_init_compatibility_pushdCount=$((_core_init_compatibility_pushdCount-1))
			eval "local path=\"\$core_init_pushdStack${_core_init_compatibility_pushdCount}\""
			eval "unset core_init_pushdStack${_core_init_compatibility_pushdCount}"
			cd "$path" 1>/dev/null
		}
	
	else
		
		pushd()
		{
			builtin pushd "$@" 1>/dev/null
		}
	
		popd()
		{
			builtin popd "$@" 1>/dev/null
		}
		
	fi
}

core_compability_installPushdAndPopd
